#version 330 core

in vec2 pass_textureCoords;
in vec3 normal_Pass;
in vec3 toLightVector;
in vec3 toCameraVector;
in float visibility;

out vec4 out_Color;

uniform sampler2D backgroundTexture;
uniform sampler2D rTexture;
uniform sampler2D gTexture;
uniform sampler2D bTexture;
uniform sampler2D blendMap;


uniform vec3 lightColor;
uniform float reflectivity;
uniform float shineDamper;
uniform vec3 skyColor;

void main(void){
	
	vec4 blendMapColor = texture(blendMap, pass_textureCoords);
	float backTextureAmont = 1 - (blendMapColor.r + blendMapColor.g + blendMapColor.b);
	vec2 tiled_textureCoords = pass_textureCoords*40;
	vec4 backgroundColor = texture(backgroundTexture, tiled_textureCoords)*backTextureAmont;
	vec4 rColor = texture(rTexture, tiled_textureCoords)*blendMapColor.r;
	vec4 gColor = texture(gTexture, tiled_textureCoords)*blendMapColor.g;
	vec4 bColor = texture(bTexture, tiled_textureCoords)*blendMapColor.b;
	
	vec4 totalColor = backgroundColor + rColor + gColor + bColor;
	
	
	vec3 unitNormal = normalize(normal_Pass);
	vec3 unitToLightVector = normalize(toLightVector);
	vec3 unitReflectLightVector = reflect(-unitToLightVector, unitNormal);
	vec3 unitToCameraVector = normalize(toCameraVector);
	
	float specularFactor = max(0.0, dot(unitReflectLightVector, unitToCameraVector));
	vec3 finalSpecular = pow(specularFactor, shineDamper)*reflectivity*lightColor;
	
	float brightness = max(dot(unitNormal, unitToLightVector), 0.2);
	vec3 diffuse = brightness*lightColor;
	
	out_Color = vec4(diffuse, 0.0)* totalColor + vec4(finalSpecular,1.0);
	out_Color = mix(vec4(skyColor, 1.0), out_Color, visibility);
}