#version 330 core

in vec2 textureCoords_Pass;
in vec3 normal_Pass;
in vec3 toLightVector;
in vec3 toCameraVector;
in float visibility;

out vec4 out_Color;

uniform sampler2D textureSampler;
uniform vec3 lightColor;
uniform float reflectivity;
uniform float shineDamper;
uniform vec3 skyColor;

void main(void){
	vec3 unitNormal = normalize(normal_Pass);
	
	vec3 unitToLightVector = normalize(toLightVector);
	vec3 unitReflectLightVector = reflect(-unitToLightVector, unitNormal);
	vec3 unitToCameraVector = normalize(toCameraVector);
	
	float specularFactor = max(0.0, dot(unitReflectLightVector, unitToCameraVector));
	vec3 finalSpecular = pow(specularFactor, shineDamper)*reflectivity*lightColor;
	
	float brightness = max(dot(unitNormal, unitToLightVector), 0.2);
	vec3 diffuse = brightness*lightColor;
	
	vec4 textureColor = texture(textureSampler, textureCoords_Pass);
	if(textureColor.a<0.5){
		discard;
	}
	
	out_Color = vec4(diffuse, 0.0)*textureColor + vec4(finalSpecular,1.0);
	out_Color = mix(vec4(skyColor, 1.0), out_Color, visibility);

}