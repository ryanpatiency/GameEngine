#version 330 core

in vec3 position;
in vec2 textureCoords;
in vec3 normal;

out vec2 pass_textureCoords;
out vec3 normal_Pass;
out vec3 toLightVector;
out vec3 toCameraVector;
out float visibility;

uniform mat4 transformationMatrix;
uniform mat4 projectionMatrix;
uniform mat4 viewMatrix;
uniform vec3 lightPosition;

const float dencity = 0;
const float gredient = 10;


void main(void){

	

	vec4 worldPosition = transformationMatrix * vec4(position,1.0);
	gl_Position = projectionMatrix * viewMatrix * worldPosition;
	pass_textureCoords = textureCoords;
	normal_Pass = (transformationMatrix * vec4(normal,0.0)).xyz;
	toLightVector = lightPosition - worldPosition.xyz;
	toCameraVector = (inverse(viewMatrix)*vec4(0.0,0.0,0.0,1.0)-worldPosition).xyz;
	float distance = length(toCameraVector);
	visibility = exp(-pow((dencity*distance), gredient));
	visibility = clamp(visibility, 0.0, 1.0);
	
}